function OmegaTrackAnalysis_HighMagn_JR1(TN)%-- This function extracts the major parameters for the current Track and plots them%-- based on the preferences in Prefs%-- works outside wormanalyzerglobal Tracks;global Prefs;global Current;%-- Get current track no.%H = findobj('tag', 'SLIDER');%TN = round(get(H, 'Value'));% Calculate track parameters% --------------------------if ~(Current.Analyzed)	%-- Calculate time of each frame    Tracks(TN).Time = Tracks(TN).Frames/Prefs.SampleRate;	%-- Number of frames    Tracks(TN).NumFrames = length(Tracks(TN).Frames);	%-- Smooth track data by rectangular sliding window of size WinSize;    try	Tracks(TN).SmoothX = RecSlidingWindow(Tracks(TN).Path(:,1)', (Prefs.SmoothWinSize*Prefs.SampleRate));	Tracks(TN).SmoothY = RecSlidingWindow(Tracks(TN).Path(:,2)', (Prefs.SmoothWinSize*Prefs.SampleRate));     catch        disp( 'couldnt smooth')        Tracks(TN).Speed=NaN(1,length(Tracks(TN).SmoothX));        return    end	%-- Calculate Direction & Speed	Xdif = AnalyzerCalcMethods.CalcDif(Tracks(TN).SmoothX, Prefs.StepSize) * Prefs.SampleRate;	%-- Negative sign allows "correct" direction    Ydif = -AnalyzerCalcMethods.CalcDif(Tracks(TN).SmoothY, Prefs.StepSize) * Prefs.SampleRate;        %-- calcuation (i.e. 0 = Up/North)	ZeroYdifIndexes = find(Ydif == 0);    %-- Avoid division by zero in direction calculation    Ydif(ZeroYdifIndexes) = eps;    	%-- In degrees, 0 = Up ("North")    Tracks(TN).Direction = atan(Xdif./Ydif) * 360/(2*pi);    NegYdifIndexes = find(Ydif < 0);    Index1 = find(Tracks(TN).Direction(NegYdifIndexes) <= 0);	Index2 = find(Tracks(TN).Direction(NegYdifIndexes) > 0);	Tracks(TN).Direction(NegYdifIndexes(Index1)) = Tracks(TN).Direction(NegYdifIndexes(Index1)) + 180;	Tracks(TN).Direction(NegYdifIndexes(Index2)) = Tracks(TN).Direction(NegYdifIndexes(Index2)) - 180;	%-- In mm/sec    Tracks(TN).Speed = sqrt(Xdif.^2 + Ydif.^2) * Prefs.PixelSize;        Tracks(TN).SmoothEccentricity = RecSlidingWindow(Tracks(TN).Eccentricity, Prefs.SmoothWinSize);    % the way angular velocity is calculated is insanely comlicated, new version    % here (deg/frame):    Tracks(TN).AngSpeed=diff(Tracks(1,TN).Direction);    %-- Identify Omegas!!-----    [ Tracks(TN).OmegaTrans] = IdentifyOmegas_JRv1(Tracks(TN));    %%%%%        Current.Analyzed = 1;    end;%%%plotting%%%%-- Replot smooth track & analysis results %-- --------------------------------------% -- Only plot results if not running in Batch Modeif ~Current.BatchAnalysis        figure(Prefs.FigH);    hold on;    hold off;    AnalFigH = findobj('Tag', 'ANALFIG');    if isempty(AnalFigH)        AnalFigH = figure('Name', 'Analysis Results', 'NumberTitle', 'off', ...            'Tag', 'ANALFIG');    else        figure(AnalFigH)    end;        NumPlots = Prefs.PlotDirection + Prefs.PlotSpeed + Prefs.PlotAngSpeed;    i = 1;           end    % END IF ~Current.BatchAnalysis