%-- Tracks all avi files in current working folder, analyzes the track files%-- and then and plots the datafunction [logReport, Tracks] = BatchWormTrackerHist_JRv1_largeFiles(sParam, logReport)close all;%-- Tracking prefs%-- Min Length of valid track (in frames)MinTrackLength = sParam.MinTrackLength;PlotFrameRate = sParam.PlotFrameRate;%-- Define Parameters & Intialize variables% ----------------------------------------%-- Min area for object to be a valid wormMinWormArea = sParam.MinWormArea;  %20 45 25original value - works for 1024x1024 jesse reset 10.14.05 from 15%-- Max area for object to be a valid wormMaxWormArea = sParam.MaxWormArea; %160, 170, original value - works for 1024x1024 jesse reset 10.14.05 from 140%-- Min Distance for connecting a new worm to an existing track (in pixels)MinDistance = 20; %10%-- Max size change between frames (in pixels)SizeChangeThreshold = sParam.SizeChangeThreshold; %500BackgroundLevel = sParam.BackgroundLevel; %0.3; %%%Level = 0.1; %-- orginal valueBWLevel = sParam.BWLevel; %0.15; %-- original valuedynamicHistogram = 10;disp(strcat('... start ', 32 , mfilename));Tracks = [];%-- worm tracker:%-- Get AVI movie for analysis% --------------------------flnms = dir(sParam.MovieSearchString); %-- create structure from filenames[nummovs, dm] = size(flnms);disp(['# movies: ' num2str(nummovs)])if sParam.StartFile>1    disp(['!! starting with file #' num2str(sParam.StartFile)])end%%%%%%%% main loop over movies%%%%%%%%%%%%%%for currentmov = sParam.StartFile : nummovs;        if strcmp(sParam.vDisplayPlots, 'on')% close all figures        close all    end        disp('...');        MovieName = (flnms(currentmov).name);    [~, SaveNameBase, ~] = fileparts(MovieName);    SaveNameBase = strrep(num2str(SaveNameBase),'.','_');    % check if tracks file already exists for current movie:    analyzed_files=dir('*.mat');    disp(datestr(now));    analyzed_name= [SaveNameBase  '_v2_tracks.mat'];        nd=(cd);    currname= strfind(cd, '\');    if length(currname)>1        name=strcat(nd(currname(end-1)+1:currname(end)-1),'_',nd(currname(end)+1:(end)),'_analysis')    else        name=strcat(nd(currname(1)+1:end),'_analysis');    end           %look files up, take the uncompressed if available    cm=NaN;    if ~isempty(strfind(MovieName,'mjpe'))        cm=dir([MovieName(1:end-12) '*']);    end    if length(cm)>1    MovieName=cm(1).name;    SaveNameBase=MovieName(1:end-4);    disp(['track uncompressed movie: ' MovieName])    end        if exist(analyzed_name)~=2                disp(strcat('... start tracking file', 32, MovieName));                useMoviePath = MovieName;        if sParam.useCluster            %-- copy current movie from provided working directory            %-- to local working directory. When using cluster analysis            %-- this should speed up the tracking process by reducing loading            %-- times for each frame.            copyCurrMovToWD = fullfile(sParam.localWorkingDirectory, MovieName);            disp(strcat('... copy file to', 32, copyCurrMovToWD));            copyfile(MovieName, copyCurrMovToWD);            useMoviePath = copyCurrMovToWD;        end;                if strcmp(sParam.MovieTypeUsed, 'AVI')            FileInfo = VideoReader(useMoviePath);            currMovieFrames = FileInfo.NumberOfFrames;        else            FileInfo = VideoPlayer(useMoviePath, 'Verbose', false, 'ShowTime', false);            currMovieFrames = FileInfo.NumFrames;        end;                close        WTFigH = figure('Name', 'Worm Tracker','NumberTitle', 'off','Tag', 'WTFIG');                %-- Analyze Movie------------        % -------------        if sParam.TrackerUseDynamicBackground            disp('... create background image');            if strcmp(sParam.MovieTypeUsed, 'AVI')                background = getbackgroundMZ64(MovieName,300);            else                background = getbackgroundMZ64_MSv101(FileInfo);            end;            imshow(background);        else            disp('... use no background subtraction');            FileInfo = VideoReader(MovieName);%             FileInfo = VideoReader(RawMovieName);            m = FileInfo.Width;            n = FileInfo.Height;            if strcmp(FileInfo.VideoFormat,'RGB24')                                               background = zeros(n,m,3,'uint8'); %for 24-bit movies                whitebackground = uint8(repmat(255,n,m,3));            else                background = zeros(n,m,'double');   %for 8-bit movies                         end;                    end;                        WormSizesHistFig = figure();        title('size histogram');        factor=3.2;        disp(strcat('... File has',32,int2str(currMovieFrames),32,'Frames.'));        filesize{1,2}=0;        try        FileInfo = VideoReader(MovieName);        catch        FileInfo = VideoPlayer(MovieName, 'Verbose', false, 'ShowTime', false);        end                for Frame = 1 : currMovieFrames                        %-- display only every PlotFrameRate'th current frame information            if rem((Frame/PlotFrameRate),1) == 0                disp(sprintf('... %s, track frame: %d', useMoviePath, Frame));            end;                                    %-- Get next frame            if strcmp(sParam.MovieTypeUsed, 'AVI')                try                Mov.cdata = read(FileInfo, Frame);                catch ME                    if ~isempty (strfind(ME.identifier,'invalidFrame'))                        break                    end                end            else               Mov.cdata = FileInfo.getFrameUInt8;                FileInfo.nextFrame();                        end;                        %-- subtract the background from the frame            %-- the image becomes inverted with this operation            if sParam.TrackerUseDynamicBackground                Movsubtract = imsubtract(background, Mov.cdata);            else                 Movsubtract =  imsubtract(whitebackground, Mov.cdata);            end                        % -- Convert frame to a binary image using auto or dynamic  thresholding            if sParam.DynamicLevel==1                                BWLevel=graythresh(Movsubtract);                if BWLevel<0.05                    BWLevel=0.1;                end                BW = im2bw(Movsubtract, BWLevel);            else                BW = im2bw(Movsubtract, BWLevel);            end                        %-- create grayscale image to retrieve pixel intensities            if size(Mov.cdata,3)==3            grayScaleImage = rgb2gray(Mov.cdata);            else                grayScaleImage = Mov.cdata;            end                        %-- save intensity distribution and mask image            %-- to check, if movie has been recorded with appropriate            %-- intensity levels            if Frame == 1                IntensityHistogram = figure();                %figure(IntensityHistogram);                set(IntensityHistogram, 'visible', sParam.vDisplayPlots);                imhist(grayScaleImage);                                intHistName = strcat(SaveNameBase, sParam.addFileTag, '_IntHist_Frame_', num2str(Frame));                Useful_functions_MS_v104.SavePlot(IntensityHistogram, intHistName, '', sParam.saveFileTypes, sParam.checkSave, 0);                                disp(strcat('... movie intensity median:', 32, num2str(median(double(grayScaleImage(:))))));                logReport = strcat(logReport,10, '... movie ', MovieName, 32, ', median:', 32, num2str(median(double(grayScaleImage(:)))));                sParam.GrayScaleIntensityMedian = median(double(grayScaleImage(:)));                                MaskFigure = figure();                %figure(MaskFigure);                set(MaskFigure, 'visible', sParam.vDisplayPlots);                imshow(BW);                MaskName = strcat(SaveNameBase, sParam.addFileTag, '_Mask_BWLvl_', strrep(num2str(BWLevel),'.','_'));                Useful_functions_MS_v104.SavePlot(MaskFigure, MaskName, '', sParam.saveFileTypes, sParam.checkSave, 0);                %             break            end;                        %-- Identify all objects            [L, NUM] = bwlabel(BW);            STATS = regionprops(L, {'Area', 'Centroid', 'FilledArea', 'Eccentricity','BoundingBox' ...                'ConvexHull', 'MajorAxisLength', 'FilledImage', 'PixelList'});                        for currObject = 1:size(STATS,1)                %-- get all pixel coordinates of current connected region                %-- retrieve all intensities corresponding to list of these coordinates from gray scale image                %-- calculate mean of all retrieved intensities and include into new STATS field 'MeanIntensity'                STATS(currObject,1).MeanIntensity = mean(grayScaleImage(sub2ind(size(grayScaleImage), ...                    STATS(currObject,1).PixelList(:,2), ...                    STATS(currObject,1).PixelList(:,1))));            end;                        %-- Identify all worms by size, get their centroid coordinates            WormIndices = find([STATS.Area] > MinWormArea & [STATS.Area] < MaxWormArea);                        NumWorms = length(WormIndices);            WormCentroids = [STATS(WormIndices).Centroid];            WormCoordinates = [WormCentroids(1:2:2*NumWorms)', WormCentroids(2:2:2*NumWorms)'];            WormSizes = [STATS(WormIndices).Area];            WormFilledAreas = [STATS(WormIndices).FilledArea];            WormEccentricities = [STATS(WormIndices).Eccentricity];                        WormMeanIntensity = [STATS(WormIndices).MeanIntensity];            WormImages = {STATS(WormIndices).FilledImage};            WormBoundingBox={STATS(WormIndices).BoundingBox};                        WormRadLens = [];            for i = 1 : NumWorms                Index = WormIndices(i);                WormConvexHull = STATS(Index).ConvexHull;                WormXConvexHull = WormConvexHull(:,1);                WormYConvexHull = WormConvexHull(:,2);                WormVortexNum = length(WormConvexHull);                WormXCoordinate = WormCoordinates(i,1);                WormYCoordinate = WormCoordinates(i,2);                UnitA = ones([WormVortexNum, 1]);                WormXCoordinateArray = WormXCoordinate * UnitA;                WormYCoordinateArray = WormYCoordinate * UnitA;                WormXD = (WormXConvexHull-WormXCoordinateArray).^2;                WormYD = (WormYConvexHull-WormYCoordinateArray).^2;                WormRadLens(i) = (sum(sqrt(WormXD+WormYD)))/WormVortexNum;                BoundingBox(i,:)= WormBoundingBox{i};            end;                        WormMajorAxes = [STATS(WormIndices).MajorAxisLength];                        WormRoundness = ((WormMajorAxes-WormRadLens)./WormRadLens);                                    %-- Track worms -----            %-- -----------            if ~isempty(Tracks)                ActiveTracks = find([Tracks.Active]);            else                ActiveTracks = [];            end;                        %-- Update active tracks with new coordinates            for i = 1:length(ActiveTracks)                DistanceX = WormCoordinates(:,1) - Tracks(ActiveTracks(i)).LastCoordinates(1);                DistanceY = WormCoordinates(:,2) - Tracks(ActiveTracks(i)).LastCoordinates(2);                Distance = sqrt(DistanceX.^2 + DistanceY.^2);                [MinVal, MinIndex] = min(Distance);                                %-- end tracks only upon an increase in size. only an increase                %-- in size signifies a worm collision. There are drastical                %-- drops in sizes throughout tracks (maybe due to frame drops,                %-- exact reason not clear at the moment). So only stop tracks,                %-- which have an increase in size without a drop in size                %-- immediately before                                %-- check, if there was a drop in size immediately before the                %-- current frame.                %-- use the average size of 8 to 3 frames before now and                %-- compare it to the size of one frame before now.                                prevSizeDrop = 0;                if size(Tracks(ActiveTracks(i)).Size,2) > 8                    getSizeMean = mean(Tracks(ActiveTracks(i)).Size(size(Tracks(ActiveTracks(i)).Size,2)-8:size(Tracks(ActiveTracks(i)).Size,2)-3));                    getLastSize = Tracks(ActiveTracks(i)).Size(size(Tracks(ActiveTracks(i)).Size,2) - 1);                    if getLastSize < getSizeMean && (getSizeMean - getLastSize) > SizeChangeThreshold                        prevSizeDrop = 1;                    end;                end;                                %-- end a track, if the size of the worm has changed more                %-- than the threshold to exclude worm collisions from analysis                %-- furthermore end it only, if the change in threshold has not been                %-- preceded by a drastic drop in size.                if (MinVal <= MinDistance) & ((WormSizes(MinIndex) - Tracks(ActiveTracks(i)).LastSize) < SizeChangeThreshold | prevSizeDrop)                    Tracks(ActiveTracks(i)).Path = [Tracks(ActiveTracks(i)).Path; WormCoordinates(MinIndex, :)];                    Tracks(ActiveTracks(i)).LastCoordinates = WormCoordinates(MinIndex, :);                    Tracks(ActiveTracks(i)).Frames = [Tracks(ActiveTracks(i)).Frames, Frame];                    Tracks(ActiveTracks(i)).Size = [Tracks(ActiveTracks(i)).Size, WormSizes(MinIndex)];                    Tracks(ActiveTracks(i)).LastSize = WormSizes(MinIndex);                    Tracks(ActiveTracks(i)).FilledArea = [Tracks(ActiveTracks(i)).FilledArea, WormFilledAreas(MinIndex)];                    Tracks(ActiveTracks(i)).Eccentricity = [Tracks(ActiveTracks(i)).Eccentricity, WormEccentricities(MinIndex)];                    Tracks(ActiveTracks(i)).MajorAxes = [Tracks(ActiveTracks(i)).MajorAxes, WormMajorAxes(MinIndex)];                    %                Tracks(ActiveTracks(i)).RadLen = [Tracks(ActiveTracks(i)).RadLen, WormRadLens(MinIndex)];                    Tracks(ActiveTracks(i)).Round = [Tracks(ActiveTracks(i)).Round, WormRoundness(MinIndex)];                    Tracks(ActiveTracks(i)).RingEffect = [Tracks(ActiveTracks(i)).RingEffect, 0];                                        Tracks(ActiveTracks(i)).MeanIntensity = [Tracks(ActiveTracks(i)).MeanIntensity, WormMeanIntensity(MinIndex)];                    Tracks(ActiveTracks(i)).WormImages = [Tracks(ActiveTracks(i)).WormImages, WormImages{MinIndex}];                    Tracks(ActiveTracks(i)).BoundingBox=[Tracks(ActiveTracks(i)).BoundingBox, BoundingBox(MinIndex,:)];                    %                 if ~mod(Frame,4)                    %                     Tracks(ActiveTracks(i)).RingDistance = [Tracks(ActiveTracks(i)).RingDistance, WormRingDistances(MinIndex)];                    %                     WormRingDistances(MinIndex) = [];                    %                 else                    %                     Tracks(ActiveTracks(i)).RingDistance = [Tracks(ActiveTracks(i)).RingDistance, 0];                    %                 end;                    WormCoordinates(MinIndex,:) = [];                    WormSizes(MinIndex) = [];                    WormFilledAreas(MinIndex) = [];                    WormEccentricities(MinIndex) = [];                    WormMajorAxes(MinIndex) = [];                    %                WormRadLens(MinIndex) = [];                    WormRoundness(MinIndex) = [];                                        WormMeanIntensity(MinIndex) = [];                    WormImages(MinIndex) = [];                    BoundingBox(MinIndex,:) = [];                                    else                    Tracks(ActiveTracks(i)).Active = 0;                    if length(Tracks(ActiveTracks(i)).Frames) < MinTrackLength                        Tracks(ActiveTracks(i)) = [];                        ActiveTracks = ActiveTracks - 1;                    end;                end;            end;                        %-- Start new tracks for coordinates not assigned to existing tracks            NumTracks = length(Tracks);            for i = 1:length(WormCoordinates(:,1))                Index = NumTracks + i;                Tracks(Index).Active = 1;                Tracks(Index).Path = WormCoordinates(i,:);                Tracks(Index).LastCoordinates = WormCoordinates(i,:);                Tracks(Index).Frames = Frame;                Tracks(Index).Size = WormSizes(i);                Tracks(Index).LastSize = WormSizes(i);                Tracks(Index).FilledArea = WormFilledAreas(i);                Tracks(Index).Eccentricity = WormEccentricities(i);                Tracks(Index).MajorAxes = WormMajorAxes(i);                %            Tracks(Index).RadLen = WormRadLens(i);                Tracks(Index).Round = WormRoundness(i);                Tracks(Index).RingEffect = 0;                                Tracks(Index).MeanIntensity = WormMeanIntensity(i);                Tracks(Index).WormImages = WormImages(i);                Tracks(Index).BoundingBox= BoundingBox(i,:);                                %---unecessary for gradient device---                %             if ~mod(Frame,4)                %                 Tracks(Index).RingDistance = WormRingDistances(i);                %             else                %                 Tracks(Index).RingDistance = 0;                %             end;            end;                        %-- Display every PlotFrameRate'th frame            if ~mod(Frame, PlotFrameRate) & strcmp(sParam.vDisplayPlots, 'on')                PlotFrameTE_MSv101(WTFigH, Mov, Movsubtract, BW, Tracks, '', sParam.vDisplayPlots); %-- changed 2012/01/20 from PlotFrame;                FigureName = ['Worm Tracker - Results for Frame ', num2str(Frame)];                set(WTFigH, 'Name', FigureName);            end;                        %-- Display @ frame 100 for checking            if Frame==100 |Frame==10                WTFigH = figure('Name', 'Worm Tracker','NumberTitle', 'off','Tag', 'WTFIG');                PlotFrameTE_MSv101(WTFigH, Mov, Movsubtract, BW, Tracks, '', 'on'); %-- changed 2012/01/20 from PlotFrame;                FigureName = ['Worm Tracker - Proofreading Frame ', num2str(Frame)];                set(WTFigH, 'Name', FigureName);                saveas(WTFigH,[SaveNameBase '#F' num2str(Frame)],'jpg');                TrackingParameters=sParam;                SaveName = [SaveNameBase sParam.addFileTag '_v2_tracks.mat'];                save(SaveName, 'TrackingParameters', 'Tracks');            end;                                    if mod(Frame,1000)==0 & filesize{2}<1000                filesize=vsize(Tracks,'-r','-bs','mb');                TrackingParameters=sParam;                SaveName = [SaveNameBase sParam.addFileTag '_v2_tracks.mat'];                save(SaveName, 'TrackingParameters', 'Tracks');            end                                end;                %-- Get rid of invalid tracks        DeleteTracks = [];        for i = 1:length(Tracks)            if length(Tracks(i).Frames) < MinTrackLength                DeleteTracks = [DeleteTracks, i];            end;        end;        Tracks(DeleteTracks) = [];                %-- END Tracker        %-- -----------                %     Tracks.Eccentricity;        %     Tracks.Round;        %     Tracks.RadLen;                %-- Save Tracks into analysis folder        disp('... save _tracks.mat');                sParam.FileVersion = mfilename;        sParam.AnalysisDate=datestr(now);        TrackingParameters = sParam;                SaveName = [SaveNameBase sParam.addFileTag '_v2_tracks.mat'];        %check for filesize:        filesize=vsize(Tracks,'-r','-bs','mb');        if filesize{2}>1500            disp('tracks file>1 GB');            save(SaveName, 'TrackingParameters', 'Tracks','-v7.3'); % we introduced the v7-3 switch for saving large files        else            save(SaveName, 'TrackingParameters', 'Tracks')        end        disp(strcat('... (1) size tracks', 32, num2str(size(Tracks,1)),32,num2str(size(Tracks,2))));                Tracks = [];                if sParam.useCluster            %-- remove local copy of current movie            disp(strcat('... remove local copy of,', 32, MovieName));            %-- close movie handle to enable deletion of current movie            FileInfo = '';            delete(copyCurrMovToWD);        end;            else        display(strcat(analyzed_name,' ... mat file already exists'));            end    endend